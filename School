-- Retrieving data
-- SELECT queries Write the following queries:

-- A query finding all students,
SELECT * FROM STUDENTS;

-- A query finding all teachers,
SELECT * FROM TEACHERS;

-- A query finding only first names of students,
SELECT 
NAME FROM STUDENTS;

-- A query finding only surnames and emails of students,
SELECT 
SURNAME, 
EMAIL
FROM STUDENTS;

-- WHERE clause Write a following query:

-- Finding all students whose names start with the letter A,
SELECT 
name, 
surname
from STUDENTS
WHERE NAME LIKE 'A%';

-- Finding teachers with a salary above PLN 1900,
SELECT * from TEACHERS
WHERE 
pay > 1900;

-- Finding marks above 4,
select * from marks
where
mark > 4;

--Finding the teacher whose name is Bryan Cubes (note down the teacher's id 
-- on a piece of paper),
SELECT * from TEACHERS
WHERE 
name like 'Bryan Cubes'; -- id3

-- Finding marks given by Bryan (use the id from the previous point — 
-- the marks you seek will have this id in their teacher_id field).
select * from marks
where teacher_id = 3;


--  The last query already starts using the relationships between our tables. 
-- First we found out what ID Bryan has, then using that we loaded all the marks he gave.

-- AND and OR clauses Write a following query:
-- A query finding the data of a student whose name is Damian and surname is Forrester,
select * from students
where
name = 'Damian'
and 
surname = 'Forrester'; -- student_id 3, 63

-- A query finding Damian Forrester's marks higher than 3,
select * from marks
where
student_id = 3;
and 
student_id = 63;

-- All students with names starting from D or B.
SELECT 
name, 
surname
from STUDENTS
WHERE NAME LIKE 'D%'
or NAME LIKE'B%';

-- ORDER BY clause  Write a following query:

-- A query finding marks given by Clara Oakley, ordered from high to low,
select * from teachers; -- Clara Oakley id 4
SELECT * FROM marks
where
teacher_id = 4
ORDER BY MARK DESC;

-- A query finding all students ordered alphabetically by surname,
SELECT * FROM STUDENTS
ORDER BY SURNAME ASC;

-- A query finding all marks of the student whose email is 
-- bertram.adams@yahoo.com from high to low.
SELECT * FROM MARKS
JOIN 
STUDENTS
USING (student_id)
WHERE email= 'bertram.adams@yahoo.com'
ORDER BY mark DESC;

-- Adding new teacher Write a following query:
-- Try to add a new teacher to the database with the following data:
-- teacher_id - 2
-- name - John Koval
-- pay - 1300
SELECT * FROM teachers;
INSERT INTO teachers VALUES (2,'John Koval', 1300);

Has adding the teacher worked? If not, what error the database returned?
--Key (teacher_id)=(2) already exists.

-- Add the teacher from the previous point, 
-- specifying only his name and salary. Do not give the primary key (teacher_id field),
SELECT * FROM teachers;
INSERT INTO teachers VALUES (null, 'John Koval', 1300);
-- ERROR:  null value in column "teacher_id" of relation "teachers" violates not-null constraint

-- Load all teachers. What primary key has been assigned to Jan Kowalski?
SELECT * FROM teachers;
-- no such teacher...???

-- Try adding a new teacher by giving all fields (together with the primary key –
-- teacher_id field). But this time as the teacher_id give the value that does not 
-- yet exist in the table (e.g. greater by one than the last value in the filed).
SELECT * FROM teachers;
INSERT INTO teachers VALUES (6, 'John Koval', 1300);

-- Adding data - Write a following query:
-- Add a new class and assign it the newly-added teacher (main_teacher_id column).
select * from classes;
INSERT INTO classes VALUES (6, 'IX D', 6);

-- Add 5 new students, assigning them to the new class (class_id column). 
-- Try to do this with a single SQL query.
select * from students;
INSERT INTO 
students VALUES 
(81, 'Oscar', 'Wilde', 'oscar.wilde@gmail.com' ,6 ), 
(82, 'Jennifer', 'Wilde', 'j.wilde@gmail.com',6 ), 
(83, 'Richard', 'Wilde', 'r.wilde@gmail.com', 6 ),
(84, 'Bruno', 'Wilde', 'b.wilde@gmail.com', 6 ), 
(85, 'Henry', 'Wilde', 'h.wilde@gmail.com', 6 );
